import { readTextFile } from '@tauri-apps/api/fs';
import { Marked } from 'marked';
import {markedHighlight} from "marked-highlight";
import hljs from 'highlight.js';
import { rawMarkdown, compiledMarkdown } from '$lib/utils/stores';

/**
 * Accept path to file then:
 * 1. Get raw markdown from text file and set store value
 * 2. Initialize markdown converter
 * 3. When raw markdown changes, get compiled markdown and set store value
 * @param filePath 
 */
export async function setCompiledMarkdown(filePath: string) {
    // Get raw markdown from text file and set store value
    if (filePath) {
        rawMarkdown.set(
            await readTextFile(filePath)
        );
    }

    // Initialize markdown converter
    const marked = setupMarkedCompiler();

    // When raw markdown changes, get compiled markdown and set store value
    rawMarkdown.subscribe((value) => {
        const compiled = marked.parse(value);

        compiledMarkdown.set(compiled);
    })

    return;


    
    /**
     * Setup markedJS compiler with highlightJS and add open-in-new-window functionality to any HTML link/anchor tags generated by compiler
     */
    function setupMarkedCompiler() {
        // HTML link/anchor tags open in new window
        const renderer = {
            link(href: string, title: string | null | undefined, text: string) {
                const localLink = href?.startsWith(`${location.protocol}//${location.hostname}`);
                const html = marked.Renderer.prototype.link.call(this, href, title, text);
                return localLink
                    ? html
                    : html.replace(/^<a /, `<a target="_blank" rel="noreferrer noopener nofollow" `);
            }
        };

        // highlightJS
        const marked = new Marked(
            markedHighlight({
                langPrefix: 'hljs language-',
                highlight(code, lang) {
                  const language = hljs.getLanguage(lang) ? lang : 'plaintext';
                  return hljs.highlight(code, { language }).value;
                }
            })
        ).use({
            renderer
        });

        return marked;
    }
}