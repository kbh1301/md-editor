name: 'publish'

on:
  push:
    branches:
      - release

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: npm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'md-editor v__VERSION__'
          releaseBody: 'https://github.com/kbh1301/md-editor/releases'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          includeUpdaterJson: true

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Post-process release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="app-v__VERSION__"
          gh release download $TAG
          
          mv md-editor_*_aarch64.dmg "Installer for Mac (Apple Silicon)"
          mv md-editor_*_x64.dmg "Installer for Mac (Intel)"
          mv md-editor_*_en-US.msi "Installer for Windows"
          mv md-editor_*_amd64.AppImage "Installer for Linux"
          
          gh release upload $TAG "Installer for Mac (Apple Silicon).dmg" "Installer for Mac (Intel).dmg" "Installer for Windows.msi" "Installer for Linux.AppImage"
          
          gh release upload $TAG md-editor_*_aarch64.app.tar.gz md-editor_*_x64.app.tar.gz md-editor_*_en-US.msi.zip md-editor_*_amd64.AppImage.tar.gz
          
          gh release upload $TAG latest.json Source*zip Source*tar.gz

          for FILE in $(ls md-editor_* | grep -v -E 'aarch64.app.tar.gz|x64.app.tar.gz|en-US.msi.zip|amd64.AppImage.tar.gz|aarch64.dmg|x64.dmg|en-US.msi|amd64.AppImage|latest.json'); do
            gh release delete-asset $TAG $(gh release view $TAG --json assets --jq '.assets[] | select(.name == "'"$FILE"'") | .id')
          done
        # Rename installers
        # Upload renamed files
        # Upload required updaters
        # Upload latest.json and source files
        # Delete the unnecessary files from the release
